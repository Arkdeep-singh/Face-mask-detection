# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-VyhsGCunTMCteS8V79LK-7_IgVrsn5T
"""

!pip install tensorflow opencv-python kaggle

import kagglehub

# Download latest version
path = kagglehub.dataset_download("omkargurav/face-mask-dataset")

print("Path to dataset files:", path)

import shutil

source_dir = "/kaggle/input/face-mask-dataset/data"
dest_dir = "/content/face_mask_dataset"

# Copy all files and folders from source_dir to dest_dir
shutil.copytree(source_dir, dest_dir, dirs_exist_ok=True)

print(f"Dataset moved to: {dest_dir}")

from tensorflow.keras.preprocessing.image import ImageDataGenerator

IMG_SIZE = 224
BATCH_SIZE = 32

# Data Augmentation and Normalization
train_gen = ImageDataGenerator(
    rescale=1./255,
    validation_split=0.2,
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.15,
    zoom_range=0.15,
    horizontal_flip=True
)

# Training Data
train_data = train_gen.flow_from_directory(
    '/content/face_mask_dataset',
    target_size=(IMG_SIZE, IMG_SIZE),
    batch_size=BATCH_SIZE,
    class_mode='binary',
    subset='training'
)

# Validation Data
val_data = train_gen.flow_from_directory(
    '/content/face_mask_dataset',
    target_size=(IMG_SIZE, IMG_SIZE),
    batch_size=BATCH_SIZE,
    class_mode='binary',
    subset='validation'
)

import tensorflow as tf

base_model = tf.keras.applications.MobileNetV2(
    input_shape=(IMG_SIZE, IMG_SIZE, 3),
    include_top=False,
    weights='imagenet'
)
base_model.trainable = False

model = tf.keras.Sequential([
    base_model,
    tf.keras.layers.GlobalAveragePooling2D(),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dropout(0.2),
    tf.keras.layers.Dense(1, activation='sigmoid')
])

model.compile(
    optimizer='adam',
    loss='binary_crossentropy',
    metrics=['accuracy']
)
model.summary()

EPOCHS = 10
history = model.fit(
    train_data,
    epochs=EPOCHS,
    validation_data=val_data
)

model.save('/content/mask_detector_model.keras')

from tensorflow.keras.models import load_model

model = load_model('/content/mask_detector_model.keras')
model.summary()  # Optional: to see the model architecture

import cv2
import numpy as np

# Load and preprocess image
img_path = '/content/face_mask_dataset/with_mask/with_mask_2.jpg'  # update to your image path
image = cv2.imread(img_path)
image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)  # convert BGR to RGB if needed
image = cv2.resize(image, (224, 224))
image = image / 255.0  # normalize
images = np.expand_dims(image, axis=0)  # Add batch dimension, shape: (1, 224, 224, 3)

# Predict
predictions = model.predict(images)
print(predictions)

print(train_data.class_indices)

if predictions[0][0] < 0.5:
    print("Mask detected")
else:
    print("No mask detected")

loss, accuracy = model.evaluate(val_data)
print(f"Accuracy: {accuracy * 100:.2f}%")

from google.colab import files
files.download('/content/mask_detector_model.keras')